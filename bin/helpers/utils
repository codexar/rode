var path = require('path');
var fs = require('extfs');
import { Package } from '../../src/Package/Package';
import { PackageGenerator } from '../../src/Generator/PackageGenerator';
import { ProjectGenerator } from '../../src/Generator/ProjectGenerator';

export var utils = {

  /**
   * Generate components
   *
   * @param {string} component
   * @param {string} name
   * @param {string} rootPath
   * @param {boolean} [rest]
   * @param {boolean} [force]
   */
  generateComponent(component, name, rootPath, rest = false, force = false) {
    var filesPath = path.join(__dirname, '../files');
    var config = this.getConfig(rootPath);
    var _package;
    var packageName;
    var packagePath;
    var packageGenerator;
    var viewsPath;

    // find the package name
    if (component.toLowerCase() === 'package') {
      packageName = name;
    } else if (~component.indexOf(':')) {
      packageName = component.split(':')[0];
      component = component.split(':')[1];
    } else {
      this.exit(`The component ${component} is not valid`);
    }

    packagePath = path.join(rootPath, config.srcPath || 'src', packageName);
    _package = new Package(packageName, packagePath);

    // If we are not generating a package, this should exist
    if (component.toLowerCase() !== 'package' && !_package.existsSync()) {
      this.exit(`The package '${packageName}' does not exist`);
    }

    // Config package generator
    viewsPath = path.join(rootPath, config.views ? config.views.path : 'views');
    packageGenerator = new PackageGenerator(_package, viewsPath, filesPath);
    packageGenerator.viewEngine = config.views ? config.views.engine : '';
    packageGenerator.addRest = rest;
    packageGenerator.force = force;

    switch (component.toLowerCase()) {
      case 'package':
        packageGenerator.create();
        break;
      case 'controller':
        packageGenerator.createController(name);
        break;
      case 'model':
        packageGenerator.createModel(name);
        break;
      case 'routes':
        packageGenerator.createRoutes();
        break;
      default:
        this.exit(`The component ${component} is not valid`);
    }
  },

  /**
   * Generate a new project
   *
   * @param {string} projectPath
   * @param {string} viewEngine
   * @param {string} cssTemplate
   * @param {boolean} sessions
   */
  generateProject(projectPath, viewEngine, cssTemplate, sessions = false) {
    var filesPath = path.join(__dirname, '../files');
    var packageJson = require('../../package.json');
    var version = packageJson.version.split('.');
    var acceptedVersion = version[0] + '.' + version[1] + '.x';
    var projectGenerator = new ProjectGenerator(projectPath, filesPath, acceptedVersion);
    projectGenerator.viewEngine = viewEngine;
    projectGenerator.cssTemplate = cssTemplate;
    projectGenerator.sessions = sessions;
    projectGenerator.create();
  },

  /**
   * Extract the path from an array
   *
   * @param array
   * @returns {string} path
   */
  extractPath(array) {
    var count = array.length;
    for (var i = 0; i < count; i++) {
      if (array[i][0] === '/') {
        return array.splice(i, 1)[0];
      }
    }
    return null;
  },

  /**
   * Find root path for app
   *
   * @param {string} [currentPath]
   * @returns {string} path
   */
  findRootPath(currentPath = __dirname) {
    var err = false;
    while (currentPath !== '/') {
      currentPath = path.resolve(currentPath);
      if (this.isRootPath(currentPath)) {
        return currentPath;
      }
      currentPath = path.join(currentPath, '../');
    }
    return null;
  },

  /**
   * Check if path is the root path of the app
   *
   * @param {string} currentPath
   * @returns {boolean}
   */
  isRootPath(currentPath) {
    var files = fs.readdirSync(currentPath);
    return files.indexOf('package.json') !== -1 && files.indexOf('config') !== -1;
  },

  /**
   * Get the config options from config.json
   *
   * @param {string} rootPath
   */
  getConfig(rootPath) {
    var configPath = path.join(rootPath, 'config/config.json');
    return require(configPath);
  },

  /**
   * Set error when no installation is detected
   *
   * @param {string} currentPath
   */
  errorNotRode(currentPath) {
    this.exit(`Can not find a rode.js installation in ${path.resolve(currentPath)}`);
  },

  /**
   * Finish the process
   *
   * @param [error] if is defined, shows the error
   */
  exit(error) {
    if (error) {
      console.error(`  \x1b[31m${error}\x1b[0m`);
    }
    process.exit(1);
  }
};