#!/usr/bin/env node

/**
 * Based on Express.
 * Original Source: https://github.com/visionmedia/express/blob/master/bin/express
 * (The MIT License)
 *
 * Copyright (c) 2009-2013 TJ Holowaychuk <tj@vision-media.ca>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Module dependencies.
 */

var program = require('commander')
	, mkdirp = require('mkdirp')
	, pkg = require('../package.json')
	, version = pkg.version
	, os = require('os')
	, fs = require('fs');

// CLI

program
	.version(version)
	.usage('[options] [dir]')
	.option('-s, --sessions', 'add session support')
	.option('-e, --ejs', 'add ejs engine support (defaults to jade)')
	.option('-J, --jshtml', 'add jshtml engine support (defaults to jade)')
	.option('-H, --hogan', 'add hogan.js engine support')
	.option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus) (defaults to plain css)')
	.option('-f, --force', 'force on non-empty directory')
	.parse(process.argv);

// Path

var path = program.args.shift() || '.';
var filesDir = __dirname + '/files/';

// end-of-line code

var eol = os.EOL

// Template engine

program.template = 'jade';
if (program.ejs) program.template = 'ejs';
if (program.jshtml) program.template = 'jshtml';
if (program.hogan) program.template = 'hjs';

/**
 * Configs template.
 */

var config = {
	config: fs.readFileSync(filesDir + 'config/config.js').toString(),
	development: fs.readFileSync(filesDir + 'config/development.js').toString(),
	production: fs.readFileSync(filesDir + 'config/production.js').toString(),
	test: fs.readFileSync(filesDir + 'config/test.js').toString()
};

/**
 * Src template.
 */
var mainDir = filesDir + 'src/Main/';
var src = {
	Main: {
		Controller: {
			MainController: fs.readFileSync(mainDir + 'Controller/MainController.js').toString()
		},
		Model: {
			Main: fs.readFileSync(mainDir + 'Model/Main.js').toString()
		},
		Tests: {
			Controller: {
				MainControllerTest: fs.readFileSync(mainDir + 'Tests/Controller/MainControllerTest.js').toString()
			},
			Model: {
				MainTest: fs.readFileSync(mainDir + 'Tests/Model/MainTest.js').toString()
			}
		},
		routes: fs.readFileSync(mainDir + 'routes.js').toString()
	}
};


/**
 * Jade layout template.
 */

var jadeLayout = [
	'doctype 5'
	, 'html'
	, '  head'
	, '    title= title'
	, '    link(rel=\'stylesheet\', href=\'/stylesheets/style.css\')'
	, '  body'
	, '    block content'
].join(eol);

/**
 * Jade index template.
 */

var jadeIndex = [
	'extends layout'
	, ''
	, 'block content'
	, '  h1= title'
	, '  p Welcome to #{title}'
].join(eol);

/**
 * EJS index template.
 */

var ejsIndex = [
	'<!DOCTYPE html>'
	, '<html>'
	, '  <head>'
	, '    <title><%= title %></title>'
	, '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
	, '  </head>'
	, '  <body>'
	, '    <h1><%= title %></h1>'
	, '    <p>Welcome to <%= title %></p>'
	, '  </body>'
	, '</html>'
].join(eol);

/**
 * JSHTML layout template.
 */

var jshtmlLayout = [
	'<!DOCTYPE html>'
	, '<html>'
	, '  <head>'
	, '    <title> @write(title) </title>'
	, '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
	, '  </head>'
	, '  <body>'
	, '    @write(body)'
	, '  </body>'
	, '</html>'
].join(eol);

/**
 * JSHTML index template.
 */

var jshtmlIndex = [
	'<h1>@write(title)</h1>'
	, '<p>Welcome to @write(title)</p>'
].join(eol);

/**
 * Hogan.js index template.
 */
var hoganIndex = [
	'<!DOCTYPE html>'
	, '<html>'
	, '  <head>'
	, '    <title>{{ title }}</title>'
	, '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
	, '  </head>'
	, '  <body>'
	, '    <h1>{{ title }}</h1>'
	, '    <p>Welcome to {{ title }}</p>'
	, '  </body>'
	, '</html>'
].join(eol);

/**
 * Default css template.
 */

var css = [
	'body {'
	, '  padding: 50px;'
	, '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
	, '}'
	, ''
	, 'a {'
	, '  color: #00B7FF;'
	, '}'
].join(eol);

/**
 * Default less template.
 */

var less = [
	'body {'
	, '  padding: 50px;'
	, '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
	, '}'
	, ''
	, 'a {'
	, '  color: #00B7FF;'
	, '}'
].join(eol);

/**
 * Default stylus template.
 */

var stylus = [
	'body'
	, '  padding: 50px'
	, '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif'
	, 'a'
	, '  color: #00B7FF'
].join(eol);

/**
 * App template.
 */

var app = fs.readFileSync(filesDir + 'app.js').toString();

// Generate application

(function createApplication(path) {
	emptyDirectory(path, function(empty){
		if (empty || program.force) {
			createApplicationAt(path);
		} else {
			program.confirm('destination is not empty, continue? ', function(ok){
				if (ok) {
					process.stdin.destroy();
					createApplicationAt(path);
				} else {
					abort('aborting');
				}
			});
		}
	});
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
	console.log();
	process.on('exit', function(){
		console.log();
		console.log('   install dependencies:');
		console.log('     $ cd %s && npm install', path);
		console.log();
		console.log('   run the app:');
		console.log('     $ node app');
		console.log();
	});

	mkdir(path, function(){
		mkdir(path + '/public');
		mkdir(path + '/public/javascripts');
		mkdir(path + '/public/images');
		mkdir(path + '/public/stylesheets', function(){
			switch (program.css) {
				case 'less':
					write(path + '/public/stylesheets/style.less', less);
					break;
				case 'stylus':
					write(path + '/public/stylesheets/style.styl', stylus);
					break;
				default:
					write(path + '/public/stylesheets/style.css', css);
			}
		});

		mkdir(path + '/config', function() {
			write(path + '/config/config.js', config.config);
			write(path + '/config/development.js', config.development);
			write(path + '/config/production.js', config.production);
			write(path + '/config/test.js', config.test);
		});

		mkdir(path + '/src/Main', function () {
			mkdir(path + '/src/Main/Controller', function () {
				write(path + '/src/Main/Controller/MainController.js', src.Main.Controller.MainController);
			});
			mkdir(path + '/src/Main/Model', function () {
				write(path + '/src/Main/Model/Model.js', src.Main.Model.Main);
			});
			mkdir(path + '/src/Main/Tests', function () {
				mkdir(path + '/src/Main/Tests/Controller', function () {
					write(path + '/src/Main/Tests/Controller/MainControllerTest.js', src.Main.Tests.Controller.MainControllerTest);
				});
				mkdir(path + '/src/Main/Tests/Model', function () {
					write(path + '/src/Main/Tests/Model/MainTest.js', src.Main.Tests.Model.MainTest);
				});
			});
			write(path + '/src/Main/routes.js', src.Main.routes);
		});

		mkdir(path + '/views', function(){
			switch (program.template) {
				case 'ejs':
					write(path + '/views/index.ejs', ejsIndex);
					break;
				case 'jade':
					write(path + '/views/layout.jade', jadeLayout);
					write(path + '/views/index.jade', jadeIndex);
					break;
				case 'jshtml':
					write(path + '/views/layout.jshtml', jshtmlLayout);
					write(path + '/views/index.jshtml', jshtmlIndex);
					break;
				case 'hjs':
					write(path + '/views/index.hjs', hoganIndex);
					break;

			}
		});

		// CSS Engine support
		switch (program.css) {
			case 'less':
				config.config = config.config.replace('{css}', 'less');
				break;
			case 'stylus':
				config.config = config.config.replace('{css}', 'stylus');
				break;
			default:
				config.config = config.config.replace('{css}', '');
		}

		// Session support
		app = app.replace('{sess}', program.sessions
			? eol + 'app.use(rode.express.cookieParser(\'your secret here\'));' + eol + 'app.use(rode.express.session());'
			: '');

		// Template support
		config.config = config.config.replace('{ViewsTemplate}', program.template);

		// package.json
		var pkg = {
			name: 'application-name'
			, version: '0.0.1'
			, private: true
			, scripts: { start: 'node app.js' }
			, dependencies: {
				rode: version,
				underscore: ">= 1.4 < 2"
			},
			devDependencies: {
				mocha: ">= 1.13 < 2",
				"expect.js": "latest"
			}
		}

		if (program.template) pkg.dependencies[program.template] = '*';

		// CSS Engine support
		switch (program.css) {
			case 'less':
				pkg.dependencies['less-middleware'] = '*';
				break;
			default:
				if (program.css) {
					pkg.dependencies[program.css] = '*';
				}
		}

		write(path + '/package.json', JSON.stringify(pkg, null, 2));
		write(path + '/app.js', app);
	});
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
	fs.readdir(path, function(err, files){
		if (err && 'ENOENT' != err.code) throw err;
		fn(!files || !files.length);
	});
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
	fs.writeFile(path, str);
	console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
	mkdirp(path, 0755, function(err){
		if (err) throw err;
		console.log('   \033[36mcreate\033[0m : ' + path);
		fn && fn();
	});
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
	console.error(str);
	process.exit(1);
}